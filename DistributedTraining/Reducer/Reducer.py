from collections import defaultdict
from typing import Callable, List, Tuple, Any


class Reducer:
    """
    Reducer class for performing reduce operations on key-value pairs generated by Mapper.
    """

    def __init__(self, reduce_function: Callable[[Any, List[Any]], Any]):
        """
        Initialize the Reducer with a custom reduce function.

        :param reduce_function: A function to reduce values associated with the same key.
                                Takes a key and a list of values as input and returns the reduced result.
        """
        self.reduce_function = reduce_function

    def process(self, intermediate_data: List[Tuple[Any, Any]]) -> List[Tuple[Any, Any]]:
        """
        Processes the intermediate data generated by Mapper and performs the reduce operation.

        :param intermediate_data: A list of key-value pairs.
        :return: A list of reduced key-value pairs.
        """
        grouped_data = self._group_by_key(intermediate_data)
        reduced_data = []
        for key, values in grouped_data.items():
            reduced_data.append((key, self.reduce_function(key, values)))
        return reduced_data

    @staticmethod
    def _group_by_key(intermediate_data: List[Tuple[Any, Any]]) -> defaultdict:
        """
        Groups intermediate data by key.

        :param intermediate_data: A list of key-value pairs.
        :return: A dictionary where keys map to lists of values.
        """
        grouped_data = defaultdict(list)
        for key, value in intermediate_data:
            grouped_data[key].append(value)
        return grouped_data

    @staticmethod
    def example_reduce_function(key, values):
        """
        An example reduce function to sum values for the same key.

        :param key: The key for which values are being reduced.
        :param values: A list of values associated with the key.
        :return: The sum of the values.
        """
        return sum(values)


# # Example Usage
if __name__ == "__main__":
    # Example intermediate data from a Mapper
    intermediate_data = [
        ("word1", 1),
        ("word2", 1),
        ("word1", 1),
        ("word3", 1),
        ("word2", 1),
        ("word1", 1),
    ]

    # Example: Summing word counts
    reducer = Reducer(Reducer.example_reduce_function)
    reduced_data = reducer.process(intermediate_data)

    print("Reduced Data:")
    print(reduced_data)

    # Custom reduce function: Average computation
    def average_reduce_function(key, values):
        return sum(values) / len(values)

    # Example: Computing average
    avg_reducer = Reducer(average_reduce_function)
    avg_data = avg_reducer.process(intermediate_data)

    print("Average Data:")
    print(avg_data)
